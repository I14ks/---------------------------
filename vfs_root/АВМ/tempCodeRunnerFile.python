import numpy as np 
import matplotlib.pyplot as plt

# Параметры из таблицы
R_n = 1.3  # Избыточность
f = 0.2  # Доля последовательной части программы
G_n_coefficient = 0.5  # Коэффициент G(n)

# Данные профиля параллелизма
p_profile = [1, 5, 6, 8, 10, 12, 14, 16, 16, 16, 14, 16, 14, 10, 9, 8, 6, 4, 3, 1]
n_processors = 16  # Количество процессоров

# Общий объем вычислений (формула 6)
O_n = sum(p_profile)

# Для однопроцессорной системы
O_1 = O_n / R_n  # Формула избыточности (11)
T_1 = O_1  # Время равно объему вычислений

# Для многопроцессорной системы
T_n = len(p_profile)  # Время работы системы (длина профиля параллелизма)
P_avg = O_n / T_n  # Средний параллелизм (формула 7)
S_n = T_1 / T_n  # Ускорение (формула 8)
E_n = S_n / n_processors  # Эффективность (формула 9)
U_n = O_n / (n_processors * T_n)  # Утилизация (формула 10)
C_n = 1 / R_n  # Сжатие (формула 12)
Q_n = S_n * E_n * C_n  # Качество (формула 13)

# Вывод рассчитанных метрик
results_metrics = {
    "Общий объем вычислений O(n)": O_n,
    "Объем вычислений для однопроцессорной системы O(1)": O_1,
    "Средний параллелизм P_avg": P_avg,
    "Ускорение S(n)": S_n,
    "Эффективность E(n)": E_n,
    "Утилизация U(n)": U_n,
    "Сжатие C(n)": C_n,
    "Качество Q(n)": Q_n,
}

# Расчет ускорения по законам Амдала, Густафсона и Сана-Ная
n_values = np.array([2, 8, 32, 128, 512])  # Количество процессоров
G_n = G_n_coefficient * n_values

# Закон Амдала (формула 15)
S_amdahl = n_values / (1 + (n_values - 1) * f)

# Закон Густафсона (формула 17)
S_gustafson = n_values + (1 - n_values) * f

# Закон Сана-Ная (формула 18)
S_sana_nai = (f + (1 - f) * G_n) / (f + (1 - f) * G_n / n_values)

# Построение графиков ускорения
plt.figure(figsize=(12, 6))
plt.plot(n_values, S_amdahl, label="Закон Амдала", marker="o", linestyle="-")
plt.plot(n_values, S_gustafson, label="Закон Густафсона", marker="s", linestyle="--")
plt.plot(n_values, S_sana_nai, label="Закон Сана-Ная", marker="^", linestyle="-.")
plt.xlabel("Количество процессоров (n)")
plt.ylabel("Ускорение (S(n))")
plt.title("Графики ускорения по трем законам")
plt.legend()
plt.grid(True)
plt.show()

print(results_metrics)